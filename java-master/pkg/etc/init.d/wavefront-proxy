#!/bin/bash -e

# chkconfig: - 99 00
# description: Wavefront Proxy

### BEGIN INIT INFO
# Provides:          wavefront-proxy
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Required-Start:
# Required-Stop:
### END INIT INFO

################################################################################
# File any issues here: https://github.com/wavefrontHQ/java/issues.
################################################################################

service_name="wavefront-proxy"
# Source custom settings
sysconfig="/etc/sysconfig/$service_name"
# shellcheck source=/dev/null
[[ -f "$sysconfig" ]] && . $sysconfig

desc=${DESC:-Wavefront Proxy}
user="wavefront"
wavefront_dir="/opt/wavefront"
proxy_dir=${PROXY_DIR:-$wavefront_dir/wavefront-proxy}
config_dir=${CONFIG_DIR:-/etc/wavefront/wavefront-proxy}
proxy_jre_dir="$proxy_dir/proxy-jre"
export JAVA_HOME=${PROXY_JAVA_HOME:-$proxy_jre_dir}
conf_file=$CONF_FILE
if [[ -z $conf_file ]]; then
    legacy_config_dir=$proxy_dir/conf
    if [[ -r "$legacy_config_dir/wavefront.conf" ]]; then
        conf_file="$legacy_config_dir/wavefront.conf"
        >&2 echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        >&2 echo "WARNING: Using wavefront.conf file found in its old location ($legacy_config_dir)."
        >&2 echo "To suppress this warning message, please move wavefront.conf to $config_dir."
        >&2 echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    else
        conf_file="$config_dir/wavefront.conf"
    fi
fi
daemon_log_file=${DAEMON_LOG_FILE:-/var/log/wavefront/wavefront-daemon.log}
err_file="/var/log/wavefront/wavefront-error.log"
pid_file=${PID_FILE:-/var/run/$service_name.pid}
agent_jar=${AGENT_JAR:-$proxy_dir/bin/wavefront-push-agent.jar}
class="com.wavefront.agent.PushAgentDaemon"
app_args=${APP_ARGS:--f $conf_file}
java_args=${JAVA_ARGS:--XX:+AggressiveHeap}

# Legacy support for overrding JVM args in wavefront_proxy_launch.conf. We don't ship this starting in 3.25,
# use /etc/sysconfig/wavefront-proxy for all configuration instead (this is a RHEL idiom, but it will work
# just as well in debian flavors).
proxy_launch_conf="/opt/wavefront/wavefront-proxy/conf/wavefront_proxy_launch.conf"
if [[ -r $proxy_launch_conf ]]; then
	replacement_java_args=$(grep -ve '[[:space:]]*#' $proxy_launch_conf | tr '\n' ' ' | sed -e 's/^[[:space:]]*//' | sed -e 's/[[:space:]]*$//')
	if [[ "$replacement_java_args" != "-XX:+AggressiveHeap" ]]; then
		>&2 echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
		>&2 echo "Using wavefront_proxy_launch.conf for JAVA_ARGS, which will override anything specified in $sysconfig."
		>&2 echo "To suppress this warning message, please specify java args in $sysconfig."
		>&2 echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
		java_args=$replacement_java_args
	fi
fi

download_jre() {
    [[ -d $proxy_jre_dir ]] || mkdir -p $proxy_jre_dir

    echo "Checking $conf_file for HTTP proxy settings"
    proxy_host=$(grep "^\s*proxyHost=" $conf_file | cut -d'=' -f2)
    proxy_port=$(grep "^\s*proxyPort=" $conf_file | cut -d'=' -f2)
    proxy_user=$(grep "^\s*proxyUser=" $conf_file | cut -d'=' -f2)
    proxy_password=$(grep "^\s*proxyPassword=" $conf_file | cut -d'=' -f2)

    if [[ -n $proxy_host && -n $proxy_port ]]; then
        echo "Using HTTP proxy $proxy_host:$proxy_port"
        proxy_args="--proxy $proxy_host:$proxy_port"
        if [[ -n $proxy_user && -n $proxy_password ]]; then
            echo "Authenticating as $proxy_user"
            proxy_args+=" --proxy-user $proxy_user:$proxy_password"
        fi
    else
        echo "No HTTP proxy configuration detected - attempting direct download"
    fi
    curl -L --silent -o /tmp/jre.tar.gz $proxy_args https://s3-us-west-2.amazonaws.com/wavefront-misc/proxy-jre.tgz || true
    tar -xf /tmp/jre.tar.gz --strip 1 -C $proxy_jre_dir || true
    rm /tmp/jre.tar.gz || true
}

# Workaround for environments with locked-down internet access where approved traffic goes through HTTP proxy.
# If JRE cannot be found in $proxy_jre_dir (most likely because its download failed during installation), and
# $PROXY_JAVA_HOME pointing to a user-defined JRE is not defined either, we'll try to read HTTP proxy settings
# from wavefront.conf, if any, and try to download the JRE again. Ideally we should go back to bundling JRE
# and not having to worry about accessibility of external resources.
if [[ -z "$PROXY_JAVA_HOME" && ! -r $proxy_jre_dir/bin/java ]]; then
    echo "JRE not found - trying to download and install"
    download_jre
fi

jsvc=$proxy_dir/bin/jsvc

jsvc_exec()
{
    if [[ ! $1 == "-stop" ]]; then
        > $daemon_log_file
        > $err_file
    fi

	cd "$(dirname "$agent_jar")"

    set +e
	# We want word splitting below, as we're building up a command line.
	# shellcheck disable=SC2086
	$jsvc \
		-user $user \
		-home $JAVA_HOME \
		-cp $agent_jar \
		$java_args \
		-XX:OnOutOfMemoryError="kill -1 %p" \
		-Dlog4j.configurationFile=$config_dir/log4j2.xml \
		-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager \
		-errfile $err_file \
		-pidfile $pid_file \
		-wait 20 \
		-debug \
		$1 \
		$class \
		$app_args &> $daemon_log_file
	if [[ $? -ne 0 ]]; then
		echo "There was a problem, see $err_file and $daemon_log_file"
	fi
}

case "$1" in
start)
	echo "Starting $desc"
	jsvc_exec
	echo "Done"
;;
status)
	if [[ -f "$pid_file" ]]; then
		echo "$desc is running (PID $(cat "$pid_file"))"
	else
		echo "$desc is not running."
		exit 3
	fi
;;
stop)
	echo "Stopping $desc"
	jsvc_exec "-stop"
	echo "Done"
;;
restart)
	if [[ -f "$pid_file" ]]; then
		echo "Stopping $desc"
		jsvc_exec "-stop"
	fi
	echo "Starting $desc"
	jsvc_exec
	echo "Done"
;;
*)
	echo "Usage: $0 {status | start | stop | restart}"
	exit 1
esac
